!function(){"use strict";class e{constructor(e,t,s,i,r){this._title=e.name,this._link=e.link,this._id=e._id,this._templateSelector=t,this._handleCardClick=s,this._handleDeleteClick=i,this._handleLikeClick=r,this._likes=e.likes,this._ownerId=e.owner._id}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._element.querySelector(".card__icon-bin").addEventListener("click",(()=>{this._handleDeleteClick(this._id)})),this._element.querySelector(".card__icon").addEventListener("click",(e=>{this._handleLikeClick(this)})),this._element.querySelector(".card__img").addEventListener("click",(e=>{this._handleCardClick(this._title,this._link)}))}_setLikeIconOn(){this._element.querySelector(".card__icon").classList.add("card__icon_active")}_setLikeIconOff(){this._element.querySelector(".card__icon").classList.remove("card__icon_active")}addLike(e){this._setLikeIconOn(),this.isLiked=!0,this._likes=e.likes,this._editLikeCounter()}removeLike(e){this._setLikeIconOff(),this.isLiked=!1,this._likes=e.likes,this._editLikeCounter()}_deleteCard(){this._element.remove(),this._element=null}_handleInitialLikes(e){this._editLikeCounter(e),this.isLiked&&this._setLikeIconOn()}_editLikeCounter(){this._element.querySelector(".card__likes-counter").textContent=this._likes.length}getId(){return this._id}generateCard(e){this._element=this._getTemplate(),this.isLiked=this._likes.some((t=>t._id===e));const t=this._element.querySelector(".card__img"),s=this._element.querySelector(".card__title");return this._element.id=`card-${this._id}`,t.src=this._link,t.alt=`Photo of ${this._title}`,s.textContent=this._title,this._handleInitialLikes(e),this._setEventListeners(),this._ownerId!==e&&this._element.querySelector(".card__icon-bin").remove(),this._element}}class t{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(){this._items.forEach(this._renderer)}}class s{constructor(e,t){this._settings=e,this._formElement=t}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._settings.inputErrorClass),s.textContent=t,s.classList.add(this._settings.errorClass)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._settings.inputErrorClass),t.classList.remove(this._settings.errorClass),t.textContent="."}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():(this._buttonElement.classList.remove(this._settings.inactiveButtonClass),this._buttonElement.disabled=!1)}_disableButton(){this._buttonElement.classList.add(this._settings.inactiveButtonClass),this._buttonElement.disabled=!0}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._disableButton()}enableValidation(){this._inputList=[...this._formElement.querySelectorAll(this._settings.inputSelector)],this._buttonElement=this._formElement.querySelector(this._settings.submitButtonSelector),this._setEventListeners()}}class i{constructor(e){this._popup=document.querySelector(e),this._closeButton=this._popup.querySelector(".popup__close-btn")}open(){this._popup.classList.add("popup_opened"),this._setEventListeners()}close(){this._popup.classList.remove("popup_opened"),this._removeEventListeners()}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleMouseClickClose=e=>{e.target.classList.contains("popup_opened")&&this.close()};_handleBtnClickClose=e=>{this.close()};_setEventListeners(){document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleMouseClickClose),this._closeButton.addEventListener("click",this._handleBtnClickClose)}_removeEventListeners(){document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleMouseClickClose),this._closeButton.removeEventListener("click",this._handleBtnClickClose)}}class r extends i{constructor(e,t){super(e),this._handleSubmit=t,this._form=this._popup.querySelector(".form"),this._formSubmitButton=this._form.querySelector(".form__submit"),this._formSubmitButtonText=this._formSubmitButton.textContent,this._inputs=Array.from(this._form.querySelectorAll(".form__input"))}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}_onSubmit=e=>{e.preventDefault(),this.renderLoading(!0),this._handleSubmit(this._getInputValues())};_setEventListeners(){super._setEventListeners(),this._form.addEventListener("submit",this._onSubmit)}_removeEventListeners(){super._removeEventListeners(),this._form.removeEventListener("submit",this._onSubmit)}close(){super.close(),this._form.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._formSubmitButton.textContent=e?t:this._formSubmitButtonText}prePopulateFields(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}}const n={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit",inactiveButtonClass:"popup__field-submit_inactive",inputErrorClass:"form__input-error",errorClass:"popup__input-error_active"},o=document.querySelector(".profile__info-btn"),a=document.querySelector(".profile__add-btn"),l=document.querySelector(".profile__img-overlay"),h=(document.querySelector(".cards"),Array.from(document.querySelectorAll(n.formSelector)));let c;const _={},d=new class{constructor(e){let{baseUrl:t,headers:s}=e;this.baseUrl=t,this.headers=s}getInitialCards(){return this._request(`${this.baseUrl}/cards`,{headers:this.headers})}getUserInformation(){return this._request(`${this.baseUrl}/users/me`,{headers:this.headers})}editUserInformation(e){let{name:t,job:s}=e;return this._request(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:t,about:s})})}addLike(e){return this._request(`${this.baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this.headers})}removeLike(e){return this._request(`${this.baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this.headers})}addNewCard(e){let{name:t,link:s}=e;return this._request(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._request(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers})}editProfilePicture(e){let{avatar:t}=e;return this._request(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:t})})}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}fetchInitialData(){const e=this.getUserInformation(),t=this.getInitialCards();return Promise.all([e,t])}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"3392a7c3-5358-47ee-81fd-62f3278067e5","Content-Type":"application/json"}}),u=t=>{const s=new e(t,"#card-template",m,p,v);c.addItem(s.generateCard(f.userId))};function m(e,t){L.open(e,t)}function p(e){E.open(e)}function v(e){!0===e.isLiked?d.removeLike(e.getId()).then((t=>{e.removeLike(t)})).catch((e=>console.log(e))):d.addLike(e.getId()).then((t=>{e.addLike(t)})).catch((e=>console.log(e)))}const f=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this._name=document.querySelector(t),this._job=document.querySelector(s),this._avatar=document.querySelector(i),this.userId=""}getUserInfo(){return{name:this._name.textContent,job:this._job.textContent,avatar:this._avatar.src}}setUserInfo(e){let{name:t,about:s}=e;this._name.textContent=t,this._job.textContent=s}setUserAvatar(e){let{avatar:t}=e;this._avatar.src=t}}({nameSelector:".profile__info-name",jobSelector:".profile__info-job",avatarSelector:".profile__img"}),L=new class extends i{constructor(e){super(e),this._title=this._popup.querySelector(".img-popup__title"),this._image=this._popup.querySelector(".img-popup__img")}open(e,t){super.open(),this._image.src=t,this._image.alt=e,this._title.textContent=e}}(".img-popup");d.fetchInitialData().then((e=>{let[s,i]=e;f.setUserInfo(s),f.setUserAvatar(s),f.userId=s._id,c=new t({items:i,renderer:u},".cards"),c.renderItems()})).catch((e=>console.log(e)));const k=new r(".profile-popup",(e=>{d.editUserInformation(e).then((e=>{f.setUserInfo(e),k.close(),k.renderLoading(!1)})).catch((e=>console.log(e))).finally((e=>k.renderLoading(!1)))})),S=new r(".avatar-popup",(e=>{d.editProfilePicture(e).then((e=>{f.setUserAvatar(e),S.close(),S.renderLoading(!1)})).catch((e=>console.log(e))).finally((e=>S.renderLoading(!1)))})),b=new r(".card-popup",(e=>{d.addNewCard({name:e.title,link:e.link}).then((e=>{u(e),b.close()})).catch((e=>{console.log("err",e)})).finally((e=>b.renderLoading(!1)))})),E=new class extends i{constructor(e,t){super(e),this._handleSubmit=t,this._form=this._popup.querySelector(".form"),this._submitButton=this._form.querySelector(".form__submit")}_onSubmit=e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._handleSubmit(this.imgId)};_setEventListeners(){super._setEventListeners(),this._form.addEventListener("submit",this._onSubmit)}_removeEventListeners(){super._removeEventListeners(),this._form.removeEventListener("submit",this._onSubmit)}open(e){this.imgId=e,super.open()}close(){super.close(),this._submitButton.textContent="Yes"}}(".delete-popup",(e=>{d.deleteCard(e).then((t=>{document.querySelector(`#card-${e}`).remove(),E.close(),console.log("card removed")})).catch((e=>{console.log("err",e)}))}));a.addEventListener("click",(()=>{b.open(),_["card-popup__form"].resetValidation()})),o.addEventListener("click",(function(){k.prePopulateFields(f.getUserInfo()),k.open(),_.popup__form.resetValidation()})),l.addEventListener("click",(function(){S.prePopulateFields(f.getUserInfo()),S.open(),_.avatar__form.resetValidation()})),h.forEach((e=>{const t=new s(n,e);t.enableValidation(),_[e.id]=t}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,